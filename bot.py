import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import KeyboardButton as kb
from aiogram.types import InlineKeyboardButton as ikb
from aiogram.types import InputFile
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
import requests as rq
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from random import choice
import random
import datetime as dt
import os
import aiogram.utils.markdown as md
import copy
import psycopg2
import aioschedule as sch
import asyncio as aio
import configparser

cp = configparser.ConfigParser()
cp.read("config.ini")
bot = Bot(token=cp["Bot"]["TOKEN"], parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

conn = psycopg2.connect(user=cp["DB"]["user"], password=cp["DB"]["pwd"], host=cp["DB"]["host"], port=cp["DB"]["port"], database=cp["DB"]["db"])

class QuestState(StatesGroup):
    answer = State()

class SendLetterState(StatesGroup):
    ltr_text = State()

class CongratState(StatesGroup):
    wait_dt = State()
    wait_msg = State()

parties = [
    [6, [2, "–¢–≤–æ—ë –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—Ç—ã –ø—Ä–∏–∑–Ω–∞–ª–∞—Å—å –º–Ω–µ, —á—Ç–æ —è —Ç–µ–±–µ –Ω—Ä–∞–≤–ª—é—Å—å"], [2, "–ü–µ—Ä–≤—ã–µ –æ–±–Ω–∏–º–∞—à–∫–∏", "–º—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ–±–Ω–∏–º–∞–ª–∏—Å—å"]],
    [9, [2, "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–π", "–º—ã –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—á–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è"], [4, "–ü–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ - –ø–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ", "—É –Ω–∞—Å —Å–æ—Å—Ç–æ—è–ª–æ—Å—å –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –≤ –ø—Ä–∏–≤—ã—á–Ω–æ–º —Å–º—ã—Å–ª–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ - –º—ã —Å—Ö–æ–¥–∏–ª–∏ –≤ –∫–∏–Ω–æ"]],
    [10, [4, "–¢–≤–æ—ë –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—Ç—ã —Å–∫–∞–∑–∞–ª–∞, —á—Ç–æ –ª—é–±–∏—à—å –º–µ–Ω—è"]],
    [13, [1, "–ù–∞—á–∞–ª–æ –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è", "–º—ã —Å —Ç–æ–±–æ–π –Ω–∞—á–∞–ª–∏ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è"], [2, "–ü–µ—Ä–≤—ã–π –ø–æ—Ü–µ–ª—É–π", "–º—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ—Ü–µ–ª–æ–≤–∞–ª–∏—Å—å"]],
    [16, [1, "–¢–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "—Ç–µ–±–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç"]],
    [17, [2, "–ú–æ—ë –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—è —Å–∫–∞–∑–∞–ª, —á—Ç–æ –ª—é–±–ª—é —Ç–µ–±—è"]],
    [25, [2, "–ú–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è", "–º–Ω–µ –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 16 –ª–µ—Ç"]],
    [26, [1, "–ü–µ—Ä–≤–∞—è –ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞", "–º—ã –≤–ø–µ—Ä–≤—ã–µ –ª–∏—á–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å"], [3, "–ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–æ–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏", "—Ç—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∞—Å—å –∏ –ª–∏—á–Ω–æ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∞—Å—å —Å –º–æ–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏"]],
    [30, [1, "–ú–æ—ë –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "—è –ø—Ä–∏–∑–Ω–∞–ª—Å—è, —á—Ç–æ —Ç—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è"]]
]
monthes = [
    "null",
    "—è–Ω–≤–∞—Ä—è",
    "—Ñ–µ–≤—Ä–∞–ª—è",
    "–º–∞—Ä—Ç–∞",
    "–∞–ø—Ä–µ–ª—è",
    "–º–∞—è",
    "–∏—é–Ω—è",
    "–∏—é–ª—è",
    "–∞–≤–≥—É—Å—Ç–∞",
    "—Å–µ–Ω—Ç—è–±—Ä—è",
    "–æ–∫—Ç—è–±—Ä—è",
    "–Ω–æ—è–±—Ä—è",
    "–¥–µ–∫–∞–±—Ä—è"
]

@dp.message_handler(commands=['start'])
async def start_handler(msg: types.Message, state: FSMContext):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç —è —Å–æ–∑–¥–∞–ª –ª–∏—à—å –¥–ª—è –Ω–∞—Å —Å —Ç–æ–±–æ–π, –ª—é–±–∏–º–∞—è ‚ù§Ô∏è")
    await msg.answer("–û–Ω –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±–µ –æ–¥–Ω–æ –∏–∑ –Ω–∞—à–∏—Ö —Ñ–æ—Ç–æ –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ /getphoto üì∑")
    await msg.answer("–û—Ç–ø—Ä–∞–≤–ª—è—è –±–æ—Ç—É —Ñ–æ—Ç–æ (—Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–ª—è–π –ø–æ –æ–¥–Ω–æ–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞) —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å–≤–æ–µ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π üòä")
    await msg.answer("–ö–æ–º–∞–Ω–¥–∞ /ourmusic –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ç–µ–±–µ —Å–ª—É—á–∞–π–Ω—É—é –ø–µ—Å–µ–Ω –∏–∑ –Ω–∞—à–∏—Ö —Å —Ç–æ–±–æ–π üéµüéµüéµ")
    await msg.answer("–¢–∞–∫–∂–µ —è —Å–æ—Å—Ç–∞–≤–∏–ª –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—à–∏—Ö —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –Ω–∞—à–∏—Ö –¥–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π /calend, –ª–∏–±–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫–æ–π –±–ª–∏–∂–∞–π—à–∏–π –Ω–∞—à –ø—Ä–∞–∑–¥–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–æ–π /party üôÉ")
    await msg.answer("–ï—â—ë —Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ –∫–∞–∫–æ–º—É-—Ç–æ –ø—Ä–∞–∑–¥–Ω–∏–∫—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /congratulate")
    await msg.answer('–ï—â—ë —è —Å–¥–µ–ª–∞–ª –ø—Ä–∏–∫–æ–ª—å–Ω—É—é —à—Ç—É–∫—É, –∫–æ—Ç–æ—Ä—É—é –Ω–∞–∑–≤–∞–ª "–ª—é–±–æ–≤–Ω—ã–µ –ø–∏—Å—å–º–∞" üíå \n–ß—Ç–æ–±—ã –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –ø–∏—Å—å–º–æ (–Ω—É –∏–ª–∏ –∑–∞–ø–∏—Å–æ—á–∫—É üôÉ) –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /send_letter \n–ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –ø–∏—Å—å–º–∞ –æ—Ç –º–µ–Ω—è, –Ω–∞–ø–∏—à–∏ /take_letter')
    await msg.answer("–ù–æ —á—Ç–æ–±—ã –ü–û–õ–¨–∑–æ–≤—Ç—å—Å—è –≤—Å–µ–º —ç—Ç–∏–º, –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç—ã üòè \n–ù–∏—á–µ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –≤ —ç—Ç–æ–º –Ω–µ—Ç, –Ω–∞–¥–æ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ–º —Ç–æ–ª—å–∫–æ –º—ã —Å —Ç–æ–±–æ–π üòä")
    quests = (
        ("–ö–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ —É –Ω–∞—Å —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π –Ω–∞—à –ø—Ä–∞–∑–¥–Ω–∏–∫?", ["9"],"–ò–º–µ–Ω–Ω–æ —á–∏—Å–ª–æ, –±–µ–∑ –º–µ—Å—è—Ü–∞, –ø—Ä–æ—Å—Ç–æ —Ü–∏—Ñ—Ä–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üòâ"),
        ("–ì–¥–µ –º—ã –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –≤ —Å–∞–º—ã–π-—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π —Ä–∞–∑?", ["–Ω–∞ —Ä–æ–¥–Ω–∏–∫–µ", "—Ä–æ–¥–Ω–∏–∫", "–Ω–∞ —Å–ª—ë—Ç–µ", "—Å–ª—ë—Ç", "–Ω–∞ —Å–ª–µ—Ç–µ", "—Å–ª–µ—Ç", "–∞–Ω–≥–∞—Ä", "–≤ –∞–Ω–≥–∞—Ä–µ", "–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤–∫–∞", "–≤ –ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤–∫–µ"],"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë, –æ–¥–Ω–∏–º-–¥–≤—É–º—è —Å–ª–æ–≤–∞–º–∏ üòâ"),
        ("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞—à–µ–π —Å —Ç–æ–±–æ–π –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏", ["–º–æ–ª–∏—Ç–≤–∞"], "–í—Å–µ–≥–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ, –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –µ—â—ë üòâ"),
        ("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?", ["–≤–∞–Ω–µ—á–∫–∞"], "–î–∞–º –ø–æ–¥—Å–∫–∞–∑–∫—É, –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—ë—à—å –¢–´ üòä"),
        ("–ù–∞ –∫–∞–∫–æ–π —É–ª–∏—Ü–µ —è –∂–∏–≤—É?", ["–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è", "–∑–µ–ª—ë–Ω–∞—è", "–∑–µ–ª–µ–Ω–∞—è", "–Ω–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–æ–π", "–Ω–∞ –∑–µ–ª–µ–Ω–æ–π", "–Ω–∞ –∑–µ–ª—ë–Ω–æ–π"], "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ª–∏—Ü—ã –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ! –í—Å–ø–æ–º–Ω–∏ –ï–ì–≠ –ø–æ —Ä—É—Å—Å–∫–æ–º—É üòÜ"),
        ("–ß—Ç–æ –º—ã —Å —Ç–æ–±–æ–π —Å—á–∏—Ç–∞–ª–∏, –∫–æ–≥–¥–∞ —Å–∏–ª—å–Ω–æ —Å–∫—É—á–∞–ª–∏?", ['—á–∞—Å—ã', '—á–∞—Å—ã –¥–æ –≤—Å—Ç—Ä–µ—á–∏'], '–ü–û–î–°–ö–ê–ó–ö–ê: —á–∞—â–µ –≤—Å–µ–≥–æ –≤ —ç—Ç–∏ –º–æ–º–µ–Ω—Ç—ã —è –±—ã–ª –¥–∞–ª–µ–∫–æ üôÉ')
    )
    question = choice(quests)
    await msg.answer(question[0])
    async with state.proxy() as data:
        data['right_answers'] = question[1]
        data['pod'] = question[2]
    await QuestState.answer.set()

@dp.message_handler(state=QuestState.answer)
async def quest_answer_handler(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        right_answers = data['right_answers']
        pod = data['pod']
    if msg.text.lower() in right_answers:
        await msg.answer("–ú–æ–ª–æ–¥–µ—Ü, —Ç–∞–∫–æ–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–±—ã—Ç—å üòäüòâ")
        await state.finish()
        return
    else:
        await msg.answer(pod)
        await QuestState.answer.set()
        return

@dp.message_handler(commands=["getphoto"])
async def getphoto_handler(msg: types.Message):
    cur = conn.cursor()
    cur.execute("SELECT file_id FROM files_id WHERE split_part(filename, '.', 2) != 'mp3' ORDER BY random() LIMIT 1;")
    try:
        await msg.answer_photo(cur.fetchone()[0])
    except: 
        print("No files with this File ID found!")
        files = os.listdir("./photo")
        file_name = random.choice(files)
        img = InputFile("photo/"+file_name)
        mes = await msg.answer_photo(img)
        cur.execute(f"INSERT INTO files_id (file_id, filename) VALUES ('{mes.photo[-1]}', '{file_name}');")
        conn.commit()
    finally:
        cur.close()

@dp.message_handler(content_types=['photo'])
async def upload_handler(msg: types.Message):
    photo_path = str(dt.datetime.now().strftime("%Y-%m-%d %H-%M-%S"))+".jpg"
    await msg.photo[-1].download(destination_file="photo/"+photo_path)
    cur = conn.cursor()
    cur.execute(f"INSERT INTO files_id (file_id, filename) VALUES ('{msg.photo[-1]}', '{photo_path}');")
    conn.commit()
    await msg.answer("–¢–≤–æ—ë —Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ üòâ")

@dp.message_handler(commands=["ourmusic"])
async def ourmusic_handler(msg: types.Message):
    cur = conn.cursor()
    cur.execute("SELECT file_id FROM files_id WHERE split_part(filename, '.', 2) = 'mp3' ORDER BY random() LIMIT 1;")
    try:
        await msg.answer_audio(cur.fetchone()[0])
    except: 
        print("No files with this File ID found!")
        files = os.listdir("music")
        file_name = random.choice(files)
        msc = InputFile("music/"+file_name)
        mes = await msg.answer_audio(msc)
        cur.execute(f"INSERT INTO files_id (file_id, filename) VALUES ('{mes.audio}', '{file_name}');")
        conn.commit()
    finally:
        cur.close()

@dp.message_handler(commands=["calend"])
async def calend_handler(msg: types.Message):
    await msg.answer("<b><u>–ö–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞—à–∏—Ö —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤)</u></b>\n<b>13 —è–Ω–≤–∞—Ä—è</b> - –Ω–∞—á–∞–ª–æ –Ω–∞—à–µ–≥–æ –æ–±—â–µ–Ω–∏—è\n<b>16 —è–Ω–≤–∞—Ä—è</b> - —Ç–≤–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n<b>26 —è–Ω–≤–∞—Ä—è</b> - –ø–µ—Ä–≤–∞—è –ª–∏—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞\n<b>30 —è–Ω–≤–∞—Ä—è</b> - –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ —Å –º–æ–µ–π —Å—Ç–æ—Ä–æ–Ω—ã\n<b>6 —Ñ–µ–≤—Ä–∞–ª—è</b> - —Ç–≤–æ—ë –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ, –∞ —Ç–∞–∫–∂–µ –æ–±–Ω–∏–º–∞—à–∫–∏ \n<b>9 —Ñ–µ–≤—Ä–∞–ª—è</b> - –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –Ω–∞—á–∞–ª–∏ –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è\n<b>13 —Ñ–µ–≤—Ä–∞–ª—è</b> - –ø–µ—Ä–≤—ã–π –ø–æ—Ü–µ–ª—É–π\n<b>17 —Ñ–µ–≤—Ä–∞–ª—è</b> - –º–æ—ë –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ\n<b>25 —Ñ–µ–≤—Ä–∞–ª—è</b> - –º–æ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è\n<b>26 –º–∞—Ä—Ç–∞</b> - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –º–æ–∏–º–∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏\n<b>9 –∞–ø—Ä–µ–ª—è</b> - –ø–µ—Ä–≤–æ–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ –≤ –∫–∏–Ω–æ\n<b>10 –∞–ø—Ä–µ–ª—è</b> - —Ç–≤–æ—ë –≤—Ç–æ—Ä–æ–µ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ")

@dp.message_handler(commands=["party"])
async def party_handler(msg: types.Message):
    cur = [int(dt.datetime.now().strftime("%-d")), int(dt.datetime.now().strftime("%-m")), int(dt.datetime.now().strftime("%Y"))]
    party = []
    next_party = []
    j = False
    for i in parties:
        if j:
            next_party = copy.deepcopy(i)
            break
        if cur[0] < i[0]:
            party = copy.deepcopy(i)
            break
        if cur[0] == i[0]:
            j =  True
            party = copy.deepcopy(i)
    if len(party) == 0:
        party = parties[0]
        if cur[1] == 12:
            cur[1] = 1
            cur[2] += 1
        else:    
            cur[1] += 1
    if len(next_party) == 0:
        if len(party) == 2:
            n = (cur[2] - 2022) * 12 + (cur[1] - party[1][0])
            await msg.answer("–°–ª–µ–¥—É—é—â–∏–π –Ω–∞—à —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –±—É–¥–µ—Ç " + str(party[0]) + " " + monthes[cur[1]] + " - <b><i>" + party[1][1] + "</i></b>\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[1][2])
        elif len(party) == 3:
            n1 = (cur[2] - 2022) * 12 + (cur[1] - party[1][0])
            n2 = (cur[2] - 2022) * 12 + (cur[1] - party[2][0])
            await msg.answer("–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞—à–∏ —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç " + str(party[0]) + " " + monthes[cur[1]] + ": \n<b><i>" + party[1][1] + "</i></b>. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n1) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[1][2] + "\n<b><i>" + party[2][1] + "</i></b>. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n2) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[2][2])
    else:
        if len(party) == 2:
            n = (cur[2] - 2022) * 12 + (cur[1] - party[1][0])
            await msg.answer("–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º <b><i>" + party[1][1] + "</i></b>\n–ü—Ä–æ—à–ª–æ —É–∂–µ " + str(n) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[1][2])
        elif len(party) == 3:
            n1 = (cur[2] - 2022) * 12 + (cur[1] - party[1][0])
            n2 = (cur[2] - 2022) * 12 + (cur[1] - party[2][0])
            await msg.answer("–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º <b><i>" + party[1][1] + "</i></b> –∏ <b><i>" + party[2][1] + "</i></b>\n–ü—Ä–æ—à–ª–æ —É–∂–µ " + str(n1) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[1][2] + " –∏ " + str(n2) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + party[2][2])
        if len(next_party) == 2:
            n = (cur[2] - 2022) * 12 + (cur[1] - next_party[1][0])
            await msg.answer("–°–ª–µ–¥—É—é—â–∏–π –Ω–∞—à —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ –±—É–¥–µ—Ç " + str(next_party[0]) + " " + monthes[cur[1]] + " - <b><i>" + next_party[1][1] + "</i></b>\n–í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + next_party[1][2])
        elif len(next_party) == 3:
            n1 = (cur[2] - 2022) * 12 + (cur[1] - next_party[1][0])
            n2 = (cur[2] - 2022) * 12 + (cur[1] - next_party[2][0])
            await msg.answer("–°–ª–µ–¥—É—é—â–∏–µ –Ω–∞—à–∏ —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –±—É–¥—É—Ç " + str(next_party[0]) + " " + monthes[cur[1]] + ": \n<b><i>" + next_party[1][1] + "</i></b>. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n1) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + next_party[1][2] + "\n<b><i>" + next_party[2][1] + "</i></b>. –í —ç—Ç–æ–º –º–µ—Å—è—Ü–µ –±—É–¥–µ—Ç —É–∂–µ " + str(n2) + " –º–µ—Å—è—Ü–µ–≤, –∫–∞–∫ " + next_party[2][2])

@dp.message_handler(commands=["send_letter"])
async def send_letter_handler(msg: types.Message):
    keyb = types.InlineKeyboardMarkup().add(ikb("–ù–∏—Ö–∞—á—É", callback_data="cancel_send"))
    await msg.answer('–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –ª—é–±–æ–≤–Ω—É—é –∑–∞–ø–∏—Å–∫—É –¥–ª—è –º–µ–Ω—è, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ—ë –∏ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ, –∞ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–ª–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üòÜ', reply_markup=keyb)
    await SendLetterState.ltr_text.set()

@dp.callback_query_handler(text="cancel_send", state=SendLetterState.ltr_text)
async def cancel_send_handler(clbck: types.CallbackQuery, state: FSMContext):
    await clbck.message.answer("–ù—É –ª–∞–¥–Ω–æ, –º–æ–∂–µ—à—å –¥–∞–ª—å–µ—à –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞, –∞ –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞–ø–∏—Å–∞–Ω–∏—é –∑–∞–ø–∏—Å–æ—á–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –∫–æ–º–∞–Ω–¥—É /send_letter üòâ")
    await state.finish()

@dp.message_handler(state=SendLetterState.ltr_text)
async def sending_letter(msg: types.Message, state: FSMContext):
    cur = conn.cursor()
    cur.execute("INSERT INTO entries (username, msg, time) VALUES ('%s', '%s', '%s');" % (msg.from_user.full_name, msg.text, str(dt.datetime.now())))
    cur.close()
    conn.commit()
    await msg.answer("–¢–≤–æ—è –∑–∞–ø–∏—Å–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, —è —É–≤–∏–∂—É –µ—ë –∫–æ–≥–¥–∞ –∑–∞–≥–ª—è–Ω—É —Å—é–¥–∞ üòâ")
    await state.finish()
    if msg.from_user.id == cp["Bot"]["POLINA_ID"]:
        cp.set("Bot", "ME_UNREAD", "True")
        with open("config.ini", "w+") as file:
            cp.write(file)
    elif msg.from_user.id == cp["Bot"]["ME_ID"]:
        cp.set("Bot", "POLINA_UNREAD", "True")
        with open("config.ini", "w+") as file:
            cp.write(file)

num = 10

@dp.message_handler(commands=["take_letter"])
async def take_letter_handler(msg: types.Message):
    cur = conn.cursor()
    cur.execute("SELECT * FROM entries ORDER BY id DESC LIMIT 11;")
    global num
    num = 10
    res = cur.fetchall()
    if len(res) == 11:
        flag = True
    else:
        flag = False
    if len(res) == 11:
        res = res[:-1]
    for i in res:
        await msg.answer("–û—Ç: %s\n–ö–æ–≥–¥–∞: %s\n–ó–∞–ø–∏—Å–∫–∞: %s" % (i[1], i[3], i[2]))
    if flag:
        keyb = types.InlineKeyboardMarkup().add(ikb("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∫–∏", callback_data="list_10"))
        await msg.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 10 –∑–∞–ø–∏—Å–æ–∫", reply_markup=keyb)
    cur.close()
    if msg.from_user.id == int(cp["Bot"]["POLINA_ID"]):
        cp.set("Bot", "POLINA_UNREAD", "False")
        with open("config.ini", "w+") as file:
            cp.write(file)
    elif msg.from_user.id == int(cp["Bot"]["ME_ID"]):
        print("Ivan readed messages")
        cp.set("Bot", "ME_UNREAD", "False")
        with open("config.ini", "w+") as file:
            cp.write(file)

@dp.callback_query_handler(Text(startswith="list"))
async def take_more(clbck: types.CallbackQuery):
    cur = conn.cursor()
    global num
    cur.execute("SELECT * FROM entries ORDER BY id DESC LIMIT 11 OFFSET %d;" % num)
    res = cur.fetchall()
    num += 10
    if len(res) == 11:
        flag = True
    else:
        flag = False
    if len(res) == 11:
        res = res[:-1]
    for i in res:
        await clbck.message.answer("–û—Ç: %s\n–ö–æ–≥–¥–∞: %s\n–ó–∞–ø–∏—Å–∫–∞: %s" % (i[1], i[3], i[2]))
    if flag:
        keyb = types.InlineKeyboardMarkup().add(ikb("–ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø–∏—Å–∫–∏", callback_data="list_"+str(num)))
        await clbck.message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ 10 –∑–∞–ø–∏—Å–æ–∫", reply_markup=keyb)
    cur.close()

@dp.message_handler(commands=['congratulate'])
async def congrat_yandler(msg: types.Message):
    await msg.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –º–Ω–µ –Ω–∞–¥–æ –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ '–¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥ —á–∞—Å:–º–∏–Ω—É—Ç–∞'")
    await CongratState.wait_dt.set()

@dp.message_handler(state=CongratState.wait_dt)
async def congrat_date(msg: types.Message, state: FSMContext):
    try:
        congrat_dt = dt.datetime.strptime(msg.text, "%d-%m-%Y %H:%M")
    except Exception as e:
        await msg.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤–≤–µ–¥—ë–Ω–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–µ—Ä–ø–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        print(e)
    else:
        await state.update_data(congrat_time=congrat_dt)
        await CongratState.wait_msg.set()
        await msg.answer("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –ø–æ–∑–¥–∞–≤–ª–µ–Ω–∏—è")

new_congr = True

@dp.message_handler(state=CongratState.wait_msg)
async def congrat_finish(msg: types.Message, state: FSMContext):
    async with state.proxy() as data:
        congr_date = data['congrat_time']
    if msg.from_user.id == (cp['Bot']['polina_id']):
        to_id = cp['Bot']['me_id']
    elif msg.from_user.id == int(cp['Bot']['me_id']):
        to_id = cp['Bot']['polina_id']
    cur = conn.cursor()
    cur.execute("INSERT INTO congratulations (to_id, text, date) VALUES ('%s', '%s', '%s');" % (to_id, msg.text, congr_date))
    await msg.answer("–¢–≤–æ—ë –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ)")
    cur.close()
    conn.commit()
    global new_congr
    new_congr = True
    await state.finish()

async def congratulate():
    global new_congr
    while True:
        if new_congr:
            cur = conn.cursor()
            cur.execute("SELECT * FROM congratulations;")
            res = cur.fetchall()
            cur.close()
            new_congr = False
        for j in res:
            if dt.datetime.now().replace(second=0, microsecond=0) == j[3]:
                print("Hoorah!")
                await bot.send_message(j[1], j[2])
                cur = conn.cursor()
                cur.execute("DELETE FROM congratulations WHERE id=%d" % j[0])
                new_congr = True
        await aio.sleep(10)

async def notify():
    msg_text = "–ó–∞–≥–ª—è–Ω–∏ –≤ –∑–∞–ø–∏—Å–æ—á–∫–∏, –∫–∞–∂–µ—Ç—Å—è —Ç–∞–º –µ—Å—Ç—å –∫–æ–µ-—á—Ç–æ –¥–ª—è —Ç–µ–±—è üôÉ"
    if cp.getboolean('Bot', 'ME_UNREAD'):
        await bot.send_message(cp["Bot"]["ME_ID"], msg_text)
    if cp.getboolean('Bot', 'POLINA_UNREAD'):
        await bot.send_message(cp["Bot"]["POLINA_ID"], msg_text)

@dp.message_handler(commands=['sendstick'])
async def send_sticker(msg: types.Message):
    await msg.answer_sticker("‚ù§Ô∏è")

async def happy_party():
    for i in parties:
        if int(dt.datetime.now().strftime("%-d")) == 16:
            await bot.send_message(cp["Bot"]["POLINA_ID"], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –ø—Ä–∞–∑–¥–Ω–∏–∫ - <b>–î–µ–Ω—å –†–æ–∂–¥–µ–Ω–∏—è</b>! üéâ\n–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º —Ç–≤–æ—ë <i>–¥–µ–≤—è—Ç–Ω–∞–¥—Ü–∞—Ç–∏–ª–µ—Ç–∏–µ</i> üéâüéâüéâ\n–° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, –ª—é–±–∏–º–∞—è ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è")
            
        if int(dt.datetime.now().strftime("%-d")) == i[0]:
            if len(i) == 2:
                n = (int(dt.datetime.now().strftime("%Y")) - 2022) * 12 + (int(dt.datetime.now().strftime("%-m")) - i[1][0])
                await bot.send_message(cp["Bot"]["POLINA_ID"], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ - <b>{i[1][1]}</b>! üéâ\n–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º {n} –º–µ—Å—è—Ü–µ–≤ —Å –¥–Ω—è, –∫–æ–≥–¥–∞ <i>{i[1][2]}</i> üéâüéâüéâ")
                await bot.send_message(cp["Bot"]["ME_ID"], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –ø—Ä–∞–∑–¥–Ω–∏–∫ - <b>{i[1][1]}</b>! üéâ\n–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º {n} –º–µ—Å—è—Ü–µ–≤ —Å –¥–Ω—è, –∫–æ–≥–¥–∞ <i>{i[1][2]}</i> üéâüéâüéâ")
            elif len(i) == 3:
                n1 = (int(dt.datetime.now().strftime("%Y")) - 2022) * 12 + (int(dt.datetime.now().strftime("%-m")) - i[1][0])
                n2 = (int(dt.datetime.now().strftime("%Y")) - 2022) * 12 + (int(dt.datetime.now().strftime("%-m")) - i[2][0])
                await bot.send_message(cp["Bot"]["POLINA_ID"], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –∞–∂ –î–í–ê –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: <b>{i[1][1]}</b> –∏ <b>{i[2][1]}</b>! üòÉüéâ\n–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º {n1} –º–µ—Å—è—Ü–µ–≤ —Å –¥–Ω—è, –∫–æ–≥–¥–∞ <i>{i[1][2]}</i> –∏ {n2} –º–µ—Å—è—Ü–µ–≤ —Å —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ <i>{i[2][2]}</i> üéâüéâüéâ")
                await bot.send_message(cp["Bot"]["ME_ID"], f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Å–µ–≥–æ–¥–Ω—è —É –Ω–∞—Å —Å —Ç–æ–±–æ–π –∞–∂ –î–í–ê –ø—Ä–∞–∑–¥–Ω–∏–∫–∞: <b>{i[1][1]}</b> –∏ <b>{i[2][1]}</b>! üòÉüéâ\n–°–µ–≥–æ–¥–Ω—è –º—ã —Å —Ç–æ–±–æ–π –æ—Ç–º–µ—á–∞–µ–º {n1} –º–µ—Å—è—Ü–µ–≤ —Å –¥–Ω—è, –∫–æ–≥–¥–∞ <i>{i[1][2]}</i> –∏ {n2} –º–µ—Å—è—Ü–µ–≤ —Å —Ç–æ–≥–æ, –∫–æ–≥–¥–∞ <i>{i[2][2]}</i> üéâüéâüéâ")

async def scheduler():
    sch.every().day.at("9:00").do(notify)
    sch.every().day.at("21:00").do(notify)
    sch.every().day.at("8:00").do(happy_party)
    while True:
        await sch.run_pending()
        await aio.sleep(1)
        
async def on_startup(dp): 
    aio.create_task(scheduler()) 
    aio.create_task(congratulate())

if __name__ == "__main__":
    executor.start_polling(dp, on_startup=on_startup)